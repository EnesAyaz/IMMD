//
//      Lab5_1: TMS320F28335
//      (c) Frank Bormann
//
//###########################################################################
//
// FILE:	Lab5_1.c
// 
// TITLE:	DSP28335ControlCARD; Digital Output
//			4 - bit - counter at 4 LEDs LD1(GPIO9), LD2(GPIO11), LD3(GPIO34)
//			and LD4 (GPIO49) 
//			software delay loop; watchdog disabled
//			template file for Lab5_1
//###########################################################################
//  Ver | dd mmm yyyy | Who  | Description of changes
// =====|=============|======|===============================================
//  3.0 | 02 May 2008 | F.B. | Lab5_1 for F28335; 
//  3.1 | 06 Nov 2009 | F.B  | Lab5_1 for F28335 and PE revision5
//###########################################################################
#include "DSP2833x_Device.h"
Uint32 PWM_Period;
Uint32 PWM_Duty;
// Prototype statements for functions found within this file.
void Gpio_select(void);
extern void InitSysCtrl(void);
interrupt void cpu_timer0_isr(void);
extern void InitPieCtrl(void);
extern void InitPieVectTable(void);
extern void InitCpuTimers(void);
extern void ConfigCpuTimer(struct CPUTIMER_VARS*, float, float);
void Setup_ePWM1A(void);
void Setup_eCAP1(void);
interrupt void eCAP1_isr(void);
//###########################################################################
//						main code									
//###########################################################################
void main(void)
{
	int counter=0;		// binary counter for digital output

	InitSysCtrl();	 	// Basic Core Initialization

	EALLOW;             // Enable Watchdog
	SysCtrlRegs.WDCR = 0x00AF;
	EDIS;

	DINT;				// Disable all interrupts
	
	Gpio_select();		// GPIO9,GPIO11,GPIO34 and GPIO49 as output (LEDs @ peripheral explorer)
	Setup_ePWM1A();
	Setup_eCAP1();
	InitPieCtrl();
	InitPieVectTable();

	EALLOW;             // Assign TIMER0 to Interrupt Service
	PieVectTable.TINT0 = &cpu_timer0_isr;
	PieVectTable.ECAP1_INT = &eCAP1_isr;
	EDIS;

	InitCpuTimers();    // Initialize Timers
	ConfigCpuTimer(&CpuTimer0, 150, 1000000); //Set CPU Timer-0 overflows @ 100 milliseconds
	                                        // Here 150 stands for 150 MHz, 100000 for 100 msecs
	PieCtrlRegs.PIEIER1.bit.INTx7 = 1;
	IER |= 1; // Enable Interrupt Core Line
	EINT;       // Enable Control Interrupts
	ERTM;       // Enable Debug Interrupts
	CpuTimer0Regs.TCR.bit.TSS = 0; // Start timer

	while(1)
	{    
	  		counter++;
			// place your code to analyze counter here 
	  		if ((counter & 0x0001) == 1) // if bit 0 of counter = 1, set GPIO9 to 1
	  		{
	  		  GpioDataRegs.GPASET.bit.GPIO9 = 1;
	  		}
	  		else
	  		  GpioDataRegs.GPACLEAR.bit.GPIO9 = 1;
	  		if (((counter >> 1) & 0x0001) == 1)// if bit 1 of counter = 1, set GPIO11 to 1
	  		{
	  		  GpioDataRegs.GPASET.bit.GPIO11 = 1;
	  		}
	  		else
	  		  GpioDataRegs.GPACLEAR.bit.GPIO11 = 1;
	  		if (((counter >> 2) & 0x0001) == 1)// if bit 2 of counter = 1, set GPIO34 to 1
	  		{
	  		  GpioDataRegs.GPBSET.bit.GPIO34 = 1;
	  		}
	  		else
	  		  GpioDataRegs.GPBCLEAR.bit.GPIO34 = 1;
            if (((counter >> 3) & 0x0001) == 1)// if bit 3 of counter = 1, set GPIO49 to 1
            {
              GpioDataRegs.GPBSET.bit.GPIO49 = 1;
            }
            else
              GpioDataRegs.GPBCLEAR.bit.GPIO49 = 1;

            while (CpuTimer0.InterruptCount != 1)
            {
                asm("NOP");
                EALLOW;
                SysCtrlRegs.WDKEY = 0x55;
                SysCtrlRegs.WDKEY = 0xAA;
                EDIS;
            }
            CpuTimer0.InterruptCount =0;

	}
} 
interrupt void cpu_timer0_isr(void)
{
    CpuTimer0.InterruptCount++;
    PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;
    EALLOW;
    SysCtrlRegs.WDKEY = 0x55;
    SysCtrlRegs.WDKEY = 0xAA;
    EDIS;
}

void Gpio_select(void)
{
	EALLOW;
	GpioCtrlRegs.GPAMUX1.all = 0x00000001;	// GPIO15 ... GPIO0 = General Puropse I/O
	GpioCtrlRegs.GPAMUX2.all = 0x01000000;	// GPIO31 ... GPIO16 = General Purpose I/O
	GpioCtrlRegs.GPBMUX1.all = 0x00000000;	// GPIO47 ... GPIO32 = General Purpose I/O
	GpioCtrlRegs.GPBMUX2.all = 0x00000000;	// GPIO63 ... GPIO48 = General Purpose I/O
	GpioCtrlRegs.GPCMUX1.all = 0x00000000;	// GPIO79 ... GPIO64 = General Purpose I/O
	GpioCtrlRegs.GPCMUX2.all = 0x00000000;	// GPIO87 ... GPIO80 = General Purpose I/O
	 
	GpioCtrlRegs.GPADIR.all = 0x00000A00;
	// peripheral explorer: LED LD1 at GPIO9
	// peripheral explorer: LED LD2 at GPIO11
	GpioCtrlRegs.GPBDIR.all = 0x00020004;
	// peripheral explorer: LED LD3 at GPIO34
	// peripheral explorer: LED LD4 at GPIO49	
	GpioCtrlRegs.GPCDIR.all = 0x00000000;
	EDIS;
}   

void Setup_ePWM1A(void)
{
    EPwm1Regs.TBCTL.bit.CLKDIV = 2; //010 -> /4
    EPwm1Regs.TBCTL.bit.HSPCLKDIV = 5; // 101 -> /10
    EPwm1Regs.TBCTL.bit.CTRMODE = 2; // both up and down counting
    EPwm1Regs.TBPRD = 1875; // 1875 Cycle will be counted
    EPwm1Regs.AQCTLA.all = 0x0006; // zero = set; period = clear
}
void Setup_eCAP1(void)
{
  ECap1Regs.ECCTL2.bit.CONT_ONESHT = 0; // Continous Mode
  ECap1Regs.ECCTL2.bit.STOP_WRAP = 3; // stop after 4 capture
  ECap1Regs.ECCTL2.bit.REARM = 0; // no-effect
  ECap1Regs.ECCTL2.bit.SYNCI_EN = 0;
  ECap1Regs.ECCTL2.bit.SYNCO_SEL = 3; // sync is disabled
  ECap1Regs.ECCTL2.bit.TSCTRSTOP = 1; // counter is stopped
  ECap1Regs.ECCTL2.bit.CAP_APWM = 0; // Capture Mode is selected
  ECap1Regs.ECCTL1.bit.FREE_SOFT = 0; // stop immediately
  ECap1Regs.ECCTL1.bit.PRESCALE = 0; // divide by 1
  ECap1Regs.ECCTL1.bit.CAPLDEN = 1; // Capture load enabled
  ECap1Regs.ECCTL1.bit.CAP1POL = 1; // fall
  ECap1Regs.ECCTL1.bit.CAP2POL = 0; // rise
  ECap1Regs.ECCTL1.bit.CAP3POL = 1; // fall
  ECap1Regs.ECCTL1.bit.CAP4POL = 0; // rise
  ECap1Regs.ECCTL1.bit.CTRRST4 = 1; // reset after 4th capture
  ECap1Regs.ECEINT.bit.CEVT3 = 1; // interrupt is enabled for 3rd capture
}
interrupt void eCAP1_isr(void)
{
  ECap1Regs.ECCLR.bit.INT = 0; // isr visit declared
  ECap1Regs.ECCLR.bit.CEVT3 = 0; // CAP3 interrupt is re-enabled.
  PWM_Duty = (int32)ECap1Regs.CAP2 - (int32)ECap1Regs.CAP1;
  PWM_Period = (int32)ECap1Regs.CAP3 - (int32)ECap1Regs.CAP1;
  PieCtrlRegs.PIEACK.all = 8; // Acknowledged
}
//===========================================================================
// End of SourceCode.
//===========================================================================
